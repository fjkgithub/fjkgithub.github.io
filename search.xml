<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MarkDown使用手册]]></title>
    <url>%2F2019%2F08%2F27%2FMarkDown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[##标题 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 ##换行 1&lt;/br&gt; ##分割线 1*** ##文字样式 123456789*斜体*&lt;/br&gt;**加粗**&lt;/br&gt;==高亮==&lt;/br&gt;~~划线~~&lt;font color=#2196F3 size=2 face=&quot;宋体&quot;&gt;宋体大小为2蓝色的字&lt;/font&gt;&lt;center&gt;居中&lt;/center&gt;]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jsonUtils]]></title>
    <url>%2F2019%2F08%2F27%2FjsonUtils%2F</url>
    <content type="text"><![CDATA[jsonUtil工具类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package com.zzcm.shortvideospider.util;import com.fasterxml.jackson.core.JsonParseException;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.text.SimpleDateFormat;import java.util.Map;public class JsonUtil &#123; private static final Logger logger = LoggerFactory.getLogger(JsonUtil.class); private static final ObjectMapper mapper = new ObjectMapper(); public static ObjectMapper getMapper() &#123; return mapper; &#125; public static String toJson(Object object) &#123; String json = null; try &#123; json = mapper.writeValueAsString(object); &#125; catch (JsonProcessingException var3) &#123; logger.warn(var3.getMessage(), var3); &#125; return json; &#125; /** * 功能描述: fromJson(Stinrg,List.class,Map.class) * @Author: fjk * @Date: 2019/8/27 14:00 */ public static &lt;T&gt; T fromJson(String json, Class&lt;?&gt; collectionClass, Class... elementClasses) &#123; Object t = null; try &#123; t = mapper.readValue(json, mapper.getTypeFactory().constructParametricType(collectionClass, elementClasses)); &#125; catch (Exception var5) &#123; logger.warn(var5.getMessage(), var5); &#125; return (T) t; &#125; public static &lt;T&gt; T object(String json, Class&lt;T&gt; clazz) &#123; if(StringUtils.isEmpty(json)) &#123; return null; &#125; try &#123; return mapper.readValue(json, clazz); &#125; catch (JsonParseException var3) &#123; logger.error(&quot;JsonParseException&quot;, var3); &#125; catch (RuntimeException var4) &#123; logger.error(&quot;Runtime exception &quot; + StringUtils.abbreviate(json, 80), var4); &#125; catch (Exception var5) &#123; logger.error(&quot;Exception &quot; + StringUtils.abbreviate(json, 80), var5); &#125; return null; &#125; public static &lt;T&gt; T object(String json, TypeReference typeReference) &#123; Object t = null; try &#123; t = mapper.readValue(json, typeReference); &#125; catch (Exception var4) &#123; logger.warn(var4.getMessage(), var4); &#125; return (T) t; &#125; public static Map&lt;String, ?&gt; getMapFromJson(String json) &#123; Map map = null; try &#123; map = (Map)mapper.readValue(json, Map.class); &#125; catch (Exception var3) &#123; logger.warn(var3.getMessage(), var3); &#125; return map; &#125; static &#123; mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)); &#125;&#125; bean转json字符串1String str = JsonUtil.toJson(Bean); json字符串转一层bean1Bean bean = JsonUtil.object(String,Bean.class); json字符串转多层嵌套bean1Bean bean = JsonUtil.object(String,new TypeReference(Bean)&#123;&#125;); json字符串转Map1Map&lt;Sintrg,Objext&gt; map = JsonUtil.getMapFromJson(Bean); json字符串转List&lt;Map&lt;Sintrg,Objext&gt;&gt;1List&lt;Map&lt;Sintrg,Objext&gt;&gt; listMap = fromJson(Stinrg,List.class,Map.class);]]></content>
      <categories>
        <category>json</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo bulid]]></title>
    <url>%2F2019%2F08%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: baiduMore info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo rule</tag>
      </tags>
  </entry>
</search>
